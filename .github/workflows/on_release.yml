name: 'Publish Release'

on:
  release:
    types: [created]
  push:
    branches:
      - 'release_test'

jobs:
  set_version:
    name: Set Version
    runs-on: ubuntu-latest
    outputs:
      rv: ${{ steps.parse_version.outputs.rv }}
    env:
      CC_VERSION: ${{ $GITHUB_REF_NAME || 'v0.0.16' }}
    steps:
      - id: parse_version
        run: echo "::set-output name=rv::${CC_VERSION/v/}"

  build_wheels:
    name: Build Wheels
    needs: set_version
    strategy:
      matrix:
        python:
          #- '3.7'
          #- '3.8'
          - '3.9'
          #- '3.10'
        runner:
          - windows-latest
          # - macos-latest
    runs-on: ${{ matrix.runner }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python }}
      - name: Install build dependencies
        run: pip install setuptools wheel
      - name: Update release version
        run: |
          echo ${{ needs.set_version.outputs.rv }}     
          cat setup.py
          sed -i "s/developer_only/${{ needs.set_version.outputs.rv }}/" setup.py
          cat setup.py
      - name: Build Wheel
        run: python3 setup.py bdist_wheel
      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.runner }}-${{ matrix.python }}-wheel
          path: dist/*

  publish:
    needs: [set_version, build_wheels]
    name: Publish to PyPI
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Build source distribution
        run: |
          cat setup.py
          sed -i "s/developer_only/${{ needs.set_version.outputs.rv }}/" setup.py
          cat setup.py
          rm -rf dist artifacts
          python setup.py sdist
      - name: Retrieve wheels
        uses: actions/download-artifact@v3
        with:
          path: artifacts
      - name: move and list artifacts
        run: |
          cp -R artifacts/*/*.whl dist
          ls -R dist
      - name: Publish
        env:
          TWINE_USERNAME: '__token__'
          TWINE_PASSWORD:  ${{ secrets.PYPI_TEST_TOKEN }}
        run: |
          pip install twine
          twine upload --repository testpypi dist/*
